component output="false"{		this.event_cache_suffix = "";		this.prehandler_only 	= "";		this.prehandler_except 	= "";		this.posthandler_only 	= "";		this.posthandler_except = "";		this.aroundHandler_only = "";		this.aroundHandler_except = "";		/* HTTP Methods Allowed for actions. */		/* Ex: this.allowedMethods = {delete='POST,DELETE',index='GET'} */		this.allowedMethods = structnew();/*----------------------------------------- IMPLICIT EVENTS -----------------------------------------*/	public void function preHandler(required any event,required any action,required any eventArguments){		var rc = event.getCollection();	}	public void function postHandler(required any event,required any action,required any eventArguments){		var rc = event.getCollection();	}	public void function aroundHandler(required any event,required any action,required any eventArguments){		var rc = event.getCollection();		// process targeted action		argument.targetAction(event);	}	public void function onMissingAction(required any event,required any action,required any eventArguments){		var rc = event.getCollection();	}	public void function onError(required any event,required any faultAction,required any exception,required any eventArguments){		var rc = event.getCollection();	}//------------------------------------------- PUBLIC EVENTS -----------------------------------------//	public void function index(required any event,required any rc,required any prc){		event.setView("home");	}//------------------------------------------- PRIVATE EVENTS -----------------------------------------//}